from aiogram import Bot, Router, F, html
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext

from database.commands.main import *
from database.commands.users import *
from database.commands.bot_settings import *
from database.commands.converter_proxy_socks_5 import *

from keyboards.inline.misc_kb import *
from keyboards.inline.convert_menu import *

from utils.misc import *
from utils.tele import *
from utils.additionally_bot import *

from states.main_modules import *

from config import *

router = Router()
convert_queue = defaultdict(asyncio.Lock)



@router.callback_query(F.data.startswith('CONVERT'))
async def main_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    callback_data = callback.data.split('|')
    action = callback_data[1]

    bt = await select_bot_setting()
    converter_balance_min = bt.converter_balance_min
    converter_limit_accounts = bt.converter_limit_accounts
    converter_account_price = bt.converter_account_price
    converter_valid_price = bt.converter_valid_price
    user = await select_user(user_id=callback.from_user.id)

    if user.balance < converter_balance_min:
        return await CallbackAnswer(
            callback,
            text=(
                f'‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!'
                f'\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {famount(user.balance)}$'
                f'\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {famount(converter_balance_min)}$'
            ),
            show_alert=True
        )

    if action == 'M':
        await CallbackEditText(
            callback, 
            text=(
                f'<b>üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</b>'
                f'\n<b>‚îú –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                f'\n<b>‚îú –¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç:</b> <code>{famount(converter_account_price)}$</code>'
                f'\n<b>‚îú –¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥:</b> <code>{famount(converter_valid_price)}$</code>'
                f'\n<b>‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑:</b> <code>{converter_limit_accounts} —à—Ç.</code> (<code>{famount(converter_limit_accounts * converter_account_price)}$</code>)'
                f'\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>'
            ), 
            reply_markup=await convert_menu_kb()
        )

    elif action == 'tdata_to_session_tl':
        await CallbackMessageAnswer(
            callback, 
            text=(
                '<b>üóÇ tdata > üóÑ .session (TL)</b>'
                '\n\n–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–¥–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é telethon, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ tdata (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>*/79990001234/tdata/*</code>, <code>*/tdata/*</code>, <code>*/tdata_123/*</code>)'
            ), 
            reply_markup=await delete_kb()
        )

    elif action == 'session_tl_to_tdata':
        await CallbackMessageAnswer(
            callback, 
            text=(
                '<b>üóÑ .session (TL) > üóÇ tdata</b>'
                '\n\n–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ telethon –≤ —Ç–¥–∞—Ç—É, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ .session (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>79990001234.session</code>)'
            ), 
            reply_markup=await delete_kb()
        )

    elif action == 'valid_session':
        await CallbackMessageAnswer(
            callback, 
            text=(
                '<b>üóÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥: .session (TL)</b>'
                '\n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π telethon –Ω–∞ –≤–∞–ª–∏–¥, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ .session (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>79990001234.session</code>)'
            ), 
            reply_markup=await delete_kb()
        )

    elif action == 'valid_tdata':
        await CallbackMessageAnswer(
            callback, 
            text=(
                '<b>üóÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥: tdata</b>'
                '\n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–¥–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ tdata (–ù–∞–ø—Ä–∏–º–µ—Ä: <code>*/79990001234/tdata/*</code>, <code>*/tdata/*</code>, <code>*/tdata_123/*</code>)'
            ), 
            reply_markup=await delete_kb()
        )


async def get_valid_proxy():
    attempts = 30
    while attempts > 0:
        attempts -= 1
        proxy_data = await select_converter_proxy_socks_5()
        if proxy_data:
            proxy_data = {
                'scheme': proxy_data.scheme,
                'hostname': proxy_data.ip,
                'port': int(proxy_data.port),
                'username': proxy_data.login,
                'password': proxy_data.password
            }
            r = await check_proxy(proxy=proxy_data)
            if r:
                return proxy_data
    return None


async def proccessing_document_t1(bot, caption, message, folders, proxy_data, converter_account_price):
    total_sessions = 0
    success_sessions = 0
    failed_sessions = 0
    total_amount = 0
    not_enough_balance = 0
    all_sessions = []
    for index, folder in enumerate(folders):
        print(folder)
        try:
            user = await select_user(user_id=message.from_user.id)
            if user.balance < converter_account_price:
                not_enough_balance += 1
                break
            session_name = f'n{index}_t{int(time.time())}'
            session_path = f"sessions_base/{session_name}.session"
            resp = await convert_tdata_to_telethon_session(tdata=Path(folder), session_path=session_path)
            # resp = await convert_tdata_to_telethon_session(tdata=Path(f'{folder}/tdata'), session_path=session_path)
            if resp:
                total_sessions += 1
                resp1, resp2 = await get_session_for_tdata_adder(session_name=session_name, proxy=proxy_data)
                print(f'resp1: {resp1} | {type(resp2)} resp2: {resp2}')
                if resp1 and resp2 and resp2.phone:
                    phone_number = resp2.phone
                    new_session_path = f"sessions_base/{phone_number}_{int(time.time())}.session"
                    os.rename(session_path, new_session_path)
                    await update_user(user_id=message.from_user.id, data={User.balance: User.balance - converter_account_price})
                    total_amount += converter_account_price
                    success_sessions += 1
                    all_sessions.append(new_session_path)
                else:
                    failed_sessions += 1
            else:
                failed_sessions += 1
        except:
            traceback.print_exc()
    if total_amount:
        await add_record(
            ConvertHistory,
            user_id=message.from_user.id,
            total_amount=total_amount,
            count_writes=success_sessions,
            convert_type=1,
            added_at=datetime.now()
        )

    async def get_stat():
        stats = []
        if len(folders) > 0:
            stats.append(f'<b>–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫:</b> <code>{len(folders)}</code>')
        if total_sessions > 0:
            stats.append(f'<b>–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:</b> <code>{total_sessions}</code>')
        if failed_sessions > 0:
            stats.append(f'<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:</b> <code>{failed_sessions}</code>')
        if total_amount > 0:
            stats.append(f'<b>–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞:</b> <code>{famount(total_amount)}$</code>')
        if total_amount > 0:
            stats.append(f'<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{famount((await select_user(user_id=message.from_user.id)).balance)}$</code>')
        if not stats:
            return ''
        result = [f'\n‚îú <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> <code>{success_sessions}</code>']
        for i, stat in enumerate(stats):
            symbol = '‚îî' if i == len(stats) - 1 else '‚îú'
            result.append(f'{symbol} {stat}')
        return '\n'.join(result)
    not_enought_balance_text = ''
    if not_enough_balance > 0:
        not_enought_balance_text = f'\n\n<i>‚ö†Ô∏è –ü—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã.</i>'
    if not all_sessions:
        return await MessageReply(
            message, 
            text=(
                f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            )
        )
    else:
        try:
            await delete_converter_proxy_socks_5(scheme=proxy_data['scheme'], ip=proxy_data['hostname'], port=proxy_data['port'], login=proxy_data['username'], password=proxy_data['password'])
        except:
            pass
        archive_name = f'convert_users/convert_sessions_{message.from_user.id}_{int(time.time())}.zip'
        await create_archive_from_files(all_sessions, archive_name)
        await BotSendDocument(
            bot,
            chat_id=message.chat.id,
            caption=(
                f'<b>‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            ),
            document=FSInputFile(archive_name)
        )

async def proccessing_document_t2(bot, caption, message, folders, proxy_data, converter_account_price):
    total_tdata = 0
    success_tdata = 0
    failed_tdata = 0
    total_amount = 0
    not_enough_balance = 0
    all_folders = []
    convert_folder = f'convert_users/tdata_files_{int(time.time())}'
    for index, folder in enumerate(folders):
        print(folder)
        try:
            user = await select_user(user_id=message.from_user.id)
            if user.balance < converter_account_price:
                not_enough_balance += 1
                break
            tdata_folder_name = f'{convert_folder}/n{index}_{int(time.time())}'
            resp = await convert_telethon_session_to_tdata(session_path=Path(folder), tdata_folder_name=Path(tdata_folder_name))
            if resp:
                total_tdata += 1
                await update_user(user_id=message.from_user.id, data={User.balance: User.balance - converter_account_price})
                total_amount += converter_account_price
                success_tdata += 1
                all_folders.append(tdata_folder_name)
            else:
                failed_tdata += 1
        except:
            traceback.print_exc()
    if total_amount:
        await add_record(
            ConvertHistory,
            user_id=message.from_user.id,
            total_amount=total_amount,
            count_writes=total_tdata,
            convert_type=2,
            added_at=datetime.now()
        )

    async def get_stat():
        stats = []
        if len(folders) > 0:
            stats.append(f'<b>–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π:</b> <code>{len(folders)}</code>')
        if total_tdata > 0:
            stats.append(f'<b>–í—Å–µ–≥–æ —Ç–¥–∞—Ç:</b> <code>{total_tdata}</code>')
        if failed_tdata > 0:
            stats.append(f'<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:</b> <code>{failed_tdata}</code>')
        if total_amount > 0:
            stats.append(f'<b>–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞:</b> <code>{famount(total_amount)}$</code>')
        if total_amount > 0:
            stats.append(f'<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{famount((await select_user(user_id=message.from_user.id)).balance)}$</code>')
        if not stats:
            return ''
        result = [f'\n‚îú <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> <code>{success_tdata}</code>']
        for i, stat in enumerate(stats):
            symbol = '‚îî' if i == len(stats) - 1 else '‚îú'
            result.append(f'{symbol} {stat}')
        return '\n'.join(result)
    not_enought_balance_text = ''
    if not_enough_balance > 0:
        not_enought_balance_text = f'\n\n<i>‚ö†Ô∏è –ü—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã.</i>'
    if not all_folders:
        return await MessageReply(
            message, 
            text=(
                f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            )
        )
    else:
        try:
            await delete_converter_proxy_socks_5(scheme=proxy_data['scheme'], ip=proxy_data['hostname'], port=proxy_data['port'], login=proxy_data['username'], password=proxy_data['password'])
        except:
            pass
        print(f'all_folders: {all_folders}')
        archive_name = f'convert_users/convert_tdata_{message.from_user.id}_{int(time.time())}.zip'
        await create_archive_from_folders2(all_folders, archive_name)
        await BotSendDocument(
            bot,
            chat_id=message.chat.id,
            caption=(
                f'<b>‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            ),
            document=FSInputFile(archive_name)
        )

async def proccessing_document_t3(bot, caption, message, folders, proxy_data, converter_valid_price):
    total_sessions = 0
    success_sessions = 0
    failed_sessions = 0
    error_sessions = 0
    total_amount = 0
    not_enough_balance = 0
    all_sessions = []
    success_folders = []
    for index, folder in enumerate(folders):
        print(folder)
        try:
            user = await select_user(user_id=message.from_user.id)
            if user.balance < converter_valid_price:
                not_enough_balance += 1
                break
            session_name = f'none_n{index}_t{int(time.time())}'
            session_path = f"sessions_base/{session_name}.session"
            resp = await convert_tdata_to_telethon_session(tdata=Path(folder), session_path=session_path)
            # resp = await convert_tdata_to_telethon_session(tdata=Path(f'{folder}/tdata'), session_path=session_path)
            if resp:
                total_sessions += 1
                await update_user(user_id=message.from_user.id, data={User.balance: User.balance - converter_valid_price})
                total_amount += converter_valid_price
                resp1, resp2 = await get_session_for_tdata_adder(session_name=session_name, proxy=proxy_data)
                print(f'resp1: {resp1} | {type(resp2)} resp2: {resp2}')
                if resp1 and resp2 and resp2.phone:
                    phone_number = resp2.phone
                    success_sessions += 1
                    all_sessions.append(session_path)
                    success_folders.append(folder)
                else:
                    failed_sessions += 1
            else:
                error_sessions += 1
        except:
            traceback.print_exc()
    if total_amount:
        await add_record(
            ConvertHistory,
            user_id=message.from_user.id,
            total_amount=total_amount,
            count_writes=total_sessions,
            convert_type=3,
            added_at=datetime.now()
        )

    async def get_stat():
        stats = []
        if len(folders) > 0:
            stats.append(f'<b>–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫:</b> <code>{len(folders)}</code>')
        if total_sessions > 0:
            stats.append(f'<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> <code>{total_sessions}</code>')
        if failed_sessions > 0:
            stats.append(f'<b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{failed_sessions}</code>')
        if error_sessions > 0:
            stats.append(f'<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:</b> <code>{error_sessions}</code>')
        if total_amount > 0:
            stats.append(f'<b>–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞:</b> <code>{famount(total_amount)}$</code>')
        if total_amount > 0:
            stats.append(f'<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{famount((await select_user(user_id=message.from_user.id)).balance)}$</code>')
        if not stats:
            return ''
        result = [f'\n‚îú <b>–í–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{success_sessions}</code>']
        for i, stat in enumerate(stats):
            symbol = '‚îî' if i == len(stats) - 1 else '‚îú'
            result.append(f'{symbol} {stat}')
        return '\n'.join(result)
    not_enought_balance_text = ''
    if not_enough_balance > 0:
        not_enought_balance_text = f'\n\n<i>‚ö†Ô∏è –ü—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã.</i>'
    if not success_folders:
        return await MessageReply(
            message, 
            text=(
                f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            )
        )
    else:
        try:
            await delete_converter_proxy_socks_5(scheme=proxy_data['scheme'], ip=proxy_data['hostname'], port=proxy_data['port'], login=proxy_data['username'], password=proxy_data['password'])
        except:
            pass
        archive_name = f'convert_users/valid_tdata_{message.from_user.id}_{int(time.time())}.zip'
        await create_archive_from_folders2(success_folders, archive_name)
        await BotSendDocument(
            bot,
            chat_id=message.chat.id,
            caption=(
                f'<b>‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            ),
            document=FSInputFile(archive_name)
        )

async def proccessing_document_t4(bot, caption, message, folders, proxy_data, converter_valid_price):
    total_tdata = 0
    success_tdata = 0
    failed_tdata = 0
    error_tdata = 0
    total_amount = 0
    not_enough_balance = 0
    all_folders = []
    success_folders = []
    convert_folder = f'convert_users/vtdata_files_{int(time.time())}'
    for index, folder in enumerate(folders):
        print(folder)
        try:
            user = await select_user(user_id=message.from_user.id)
            if user.balance < converter_valid_price:
                not_enough_balance += 1
                break
            tdata_folder_name = f'{convert_folder}/n{index}_{int(time.time())}'
            resp = await convert_telethon_session_to_tdata(session_path=Path(folder), tdata_folder_name=Path(tdata_folder_name))
            total_tdata += 1
            await update_user(user_id=message.from_user.id, data={User.balance: User.balance - converter_valid_price})
            total_amount += converter_valid_price
            if resp:
                success_tdata += 1
                all_folders.append(tdata_folder_name)
                success_folders.append(folder)
            else:
                failed_tdata += 1
        except:
            traceback.print_exc()
    if total_amount:
        await add_record(
            ConvertHistory,
            user_id=message.from_user.id,
            total_amount=total_amount,
            count_writes=total_tdata,
            convert_type=4,
            added_at=datetime.now()
        )

    async def get_stat():
        stats = []
        if len(folders) > 0:
            stats.append(f'<b>–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π:</b> <code>{len(folders)}</code>')
        if total_tdata > 0:
            stats.append(f'<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> <code>{total_tdata}</code>')
        if failed_tdata > 0:
            stats.append(f'<b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{failed_tdata}</code>')
        if error_tdata > 0:
            stats.append(f'<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:</b> <code>{error_tdata}</code>')
        if total_amount > 0:
            stats.append(f'<b>–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞:</b> <code>{famount(total_amount)}$</code>')
        if total_amount > 0:
            stats.append(f'<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{famount((await select_user(user_id=message.from_user.id)).balance)}$</code>')
        if not stats:
            return ''
        result = [f'\n‚îú <b>–í–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{success_tdata}</code>']
        for i, stat in enumerate(stats):
            symbol = '‚îî' if i == len(stats) - 1 else '‚îú'
            result.append(f'{symbol} {stat}')
        return '\n'.join(result)
    not_enought_balance_text = ''
    if not_enough_balance > 0:
        not_enought_balance_text = f'\n\n<i>‚ö†Ô∏è –ü—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã.</i>'
    if not success_folders:
        return await MessageReply(
            message, 
            text=(
                f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            )
        )
    else:
        try:
            await delete_converter_proxy_socks_5(scheme=proxy_data['scheme'], ip=proxy_data['hostname'], port=proxy_data['port'], login=proxy_data['username'], password=proxy_data['password'])
        except:
            pass
        print(f'success_folders: {success_folders}')
        archive_name = f'convert_users/valid_sessions_{message.from_user.id}_{int(time.time())}.zip'
        await create_archive_from_files(success_folders, archive_name)
        await BotSendDocument(
            bot,
            chat_id=message.chat.id,
            caption=(
                f'<b>‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>'
                f'{await get_stat()}'
                f'{not_enought_balance_text}'
            ),
            document=FSInputFile(archive_name)
        )


@router.message(F.document)
async def handle_document(message: Message, bot: Bot, state: FSMContext):
    try:
        r = await MessageReply(message, '<b>‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞..</b>')
        try:
            reply_text = message.reply_to_message.text.strip()
        except:
            reply_text = None
        if message.document:

            if reply_text and ('–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–¥–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é telethon, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏' in reply_text):
                bt = await select_bot_setting()
                converter_balance_min = bt.converter_balance_min
                converter_limit_accounts = bt.converter_limit_accounts
                converter_account_price = bt.converter_account_price
                converter_valid_price = bt.converter_valid_price
                user = await select_user(user_id=message.from_user.id)
                if user.balance < converter_balance_min:
                    return await MessageReply(
                        message,
                        text=(
                            f'<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!</b>'
                            f'\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                            f'\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{famount(converter_balance_min)}$</code>'
                        ),
                        reply_markup=await delete_kb()
                    )
                proxy_data = await get_valid_proxy()
                if not proxy_data:
                    await MessageReply(message, '<b>‚ö†Ô∏è –¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>', reply_markup=await delete_kb())
                    bot_settings = {"session": bot.session}
                    aio_bot = Bot(token=BOT_TOKEN, **bot_settings)
                    await BotSendMessage(
                        aio_bot,
                        chat_id=bt.topic_id,
                        message_thread_id=bt.topic_not_found_proxy_theme_id,
                        text=f'<b>‚ùóÔ∏è –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞</b>'
                    )
                    return 
                    # return await MessageReply(message, '<b>‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.</b>', reply_markup=await delete_kb())
                caption = message.caption
                file_id = message.document.file_id
                file_name = message.document.file_name
                file_ext = file_name.split('.')[-1]
                # if file_ext and file_ext in ['zip', 'rar', '7z']:
                if file_ext and file_ext in ['zip']:
                    file = await bot.get_file(file_id)
                    multi_unique_id = f'{int(time.time())}-tdata-{random.randint(100000, 999999)}-{random.randint(100000, 999999)}'
                    archive_path = f'temp/{multi_unique_id}.{file_ext}'
                    output_path = f'temp/{multi_unique_id}'
                    await bot.download_file(file.file_path, f'temp/{multi_unique_id}.{file_ext}')
                    await extract_tdata(archive_path=archive_path, output_path=output_path, limit=converter_limit_accounts)
                    folders = await get_main_folders(output_path)
                    if not folders:
                        return await MessageReply(message, '<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫–∏ tdata –≤ –∞—Ä—Ö–∏–≤–µ!</b>', reply_markup=await delete_kb())
                    print(f'Folders: {len(folders)} | {folders}')
                    total_amount = len(folders) * converter_account_price
                    if user.balance < total_amount:
                        await MessageReply(
                            message,
                            text=(
                                f'<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>'
                                f'\n<b>‚îú –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                                f'\n<b>‚îú –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:</b> <code>{famount(total_amount)}$</code>'
                                f'\n<b>‚îî –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> <code>{famount(total_amount - user.balance)}$</code>'
                            ),
                            reply_markup=await multi_new_2_kb(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit', text2='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data2='DELETE')
                        )
                    else:
                        # await proccessing_document_t1(caption, message, folders, proxy_data)
                        await asyncio.gather(asyncio.create_task(proccessing_document_t1(bot, caption, message, folders, proxy_data, converter_account_price)))
                else:
                    # await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip, .rar –∏–ª–∏ .7z</b>', reply_markup=await delete_kb())
                    await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip</b>', reply_markup=await delete_kb())
            

            elif reply_text and ('–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ telethon –≤ —Ç–¥–∞—Ç—É, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏' in reply_text):
                bt = await select_bot_setting()
                converter_balance_min = bt.converter_balance_min
                converter_limit_accounts = bt.converter_limit_accounts
                converter_account_price = bt.converter_account_price
                converter_valid_price = bt.converter_valid_price
                user = await select_user(user_id=message.from_user.id)
                if user.balance < converter_balance_min:
                    return await MessageReply(
                        message,
                        text=(
                            f'<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!</b>'
                            f'\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                            f'\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{famount(converter_balance_min)}$</code>'
                        ),
                        reply_markup=await delete_kb()
                    )
                proxy_data = await get_valid_proxy()
                if not proxy_data:
                    await MessageReply(message, '<b>‚ö†Ô∏è –¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>', reply_markup=await delete_kb())
                    bot_settings = {"session": bot.session}
                    aio_bot = Bot(token=BOT_TOKEN, **bot_settings)
                    await BotSendMessage(
                        aio_bot,
                        chat_id=bt.topic_id,
                        message_thread_id=bt.topic_not_found_proxy_theme_id,
                        text=f'<b>‚ùóÔ∏è –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞</b>'
                    )
                    return 
                    # return await MessageReply(message, '<b>‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.</b>', reply_markup=await delete_kb())
                caption = message.caption
                file_id = message.document.file_id
                file_name = message.document.file_name
                file_ext = file_name.split('.')[-1]
                # if file_ext and file_ext in ['zip', 'rar', '7z']:
                if file_ext and file_ext in ['zip']:
                    file = await bot.get_file(file_id)
                    multi_unique_id = f'{int(time.time())}-sessions-{random.randint(100000, 999999)}-{random.randint(100000, 999999)}'
                    archive_path = f'temp/{multi_unique_id}.{file_ext}'
                    output_path = f'temp/{multi_unique_id}'
                    await bot.download_file(file.file_path, f'temp/{multi_unique_id}.{file_ext}')
                    await extract_session_files(archive_path=archive_path, output_path=output_path, limit=converter_limit_accounts)
                    folders = await get_main_sessions(output_path)
                    if not folders:
                        return await MessageReply(message, '<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Å—Å–∏–∏ –≤ –∞—Ä—Ö–∏–≤–µ!</b>', reply_markup=await delete_kb())
                    print(f'Folders2: {len(folders)} | {folders}')
                    total_amount = len(folders) * converter_account_price
                    if user.balance < total_amount:
                        await MessageReply(
                            message,
                            text=(
                                f'<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>'
                                f'\n<b>‚îú –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                                f'\n<b>‚îú –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:</b> <code>{famount(total_amount)}$</code>'
                                f'\n<b>‚îî –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> <code>{famount(total_amount - user.balance)}$</code>'
                            ),
                            reply_markup=await multi_new_2_kb(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit', text2='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data2='DELETE')
                        )
                    else:
                        # await proccessing_document(caption, message, folders, proxy_data)
                        await asyncio.gather(asyncio.create_task(proccessing_document_t2(bot, caption, message, folders, proxy_data, converter_account_price)))
                else:
                    await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip</b>', reply_markup=await delete_kb())
                    # await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip, .rar –∏–ª–∏ .7z</b>', reply_markup=await delete_kb())





            elif reply_text and ('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–¥–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥, –ø—Ä–∏—à–ª–∏—Ç–µ' in reply_text):
                bt = await select_bot_setting()
                converter_balance_min = bt.converter_balance_min
                converter_limit_accounts = bt.converter_limit_accounts
                converter_account_price = bt.converter_account_price
                converter_valid_price = bt.converter_valid_price
                user = await select_user(user_id=message.from_user.id)
                if user.balance < converter_balance_min:
                    return await MessageReply(
                        message,
                        text=(
                            f'<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!</b>'
                            f'\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                            f'\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{famount(converter_balance_min)}$</code>'
                        ),
                        reply_markup=await delete_kb()
                    )
                proxy_data = await get_valid_proxy()
                if not proxy_data:
                    await MessageReply(message, '<b>‚ö†Ô∏è –¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>', reply_markup=await delete_kb())
                    bot_settings = {"session": bot.session}
                    aio_bot = Bot(token=BOT_TOKEN, **bot_settings)
                    await BotSendMessage(
                        aio_bot,
                        chat_id=bt.topic_id,
                        message_thread_id=bt.topic_not_found_proxy_theme_id,
                        text=f'<b>‚ùóÔ∏è –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞</b>'
                    )
                    return 
                    # return await MessageReply(message, '<b>‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.</b>', reply_markup=await delete_kb())
                caption = message.caption
                file_id = message.document.file_id
                file_name = message.document.file_name
                file_ext = file_name.split('.')[-1]
                # if file_ext and file_ext in ['zip', 'rar', '7z']:
                if file_ext and file_ext in ['zip']:
                    file = await bot.get_file(file_id)
                    multi_unique_id = f'{int(time.time())}-tvalid-{random.randint(100000, 999999)}-{random.randint(100000, 999999)}'
                    archive_path = f'temp/{multi_unique_id}.{file_ext}'
                    output_path = f'temp/{multi_unique_id}'
                    await bot.download_file(file.file_path, f'temp/{multi_unique_id}.{file_ext}')
                    await extract_tdata(archive_path=archive_path, output_path=output_path, limit=converter_limit_accounts)
                    folders = await get_main_folders(output_path)
                    if not folders:
                        return await MessageReply(message, '<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫–∏ tdata –≤ –∞—Ä—Ö–∏–≤–µ!</b>', reply_markup=await delete_kb())
                    print(f'Folders: {len(folders)} | {folders}')
                    total_amount = len(folders) * converter_valid_price
                    if user.balance < total_amount:
                        await MessageReply(
                            message,
                            text=(
                                f'<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>'
                                f'\n<b>‚îú –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                                f'\n<b>‚îú –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:</b> <code>{famount(total_amount)}$</code>'
                                f'\n<b>‚îî –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> <code>{famount(total_amount - user.balance)}$</code>'
                            ),
                            reply_markup=await multi_new_2_kb(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit', text2='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data2='DELETE')
                        )
                    else:
                        # await proccessing_document_t1(caption, message, folders, proxy_data)
                        await asyncio.gather(asyncio.create_task(proccessing_document_t3(bot, caption, message, folders, proxy_data, converter_valid_price)))
                else:
                    # await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip, .rar –∏–ª–∏ .7z</b>', reply_markup=await delete_kb())
                    await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip</b>', reply_markup=await delete_kb())
            
            




            elif reply_text and ('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π telethon –Ω–∞ –≤–∞–ª–∏–¥, –ø—Ä–∏—à–ª–∏—Ç–µ' in reply_text):
                bt = await select_bot_setting()
                converter_balance_min = bt.converter_balance_min
                converter_limit_accounts = bt.converter_limit_accounts
                converter_account_price = bt.converter_account_price
                converter_valid_price = bt.converter_valid_price
                user = await select_user(user_id=message.from_user.id)
                if user.balance < converter_balance_min:
                    return await MessageReply(
                        message,
                        text=(
                            f'<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!</b>'
                            f'\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                            f'\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{famount(converter_balance_min)}$</code>'
                        ),
                        reply_markup=await delete_kb()
                    )
                proxy_data = await get_valid_proxy()
                if not proxy_data:
                    await MessageReply(message, '<b>‚ö†Ô∏è –¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>', reply_markup=await delete_kb())
                    bot_settings = {"session": bot.session}
                    aio_bot = Bot(token=BOT_TOKEN, **bot_settings)
                    await BotSendMessage(
                        aio_bot,
                        chat_id=bt.topic_id,
                        message_thread_id=bt.topic_not_found_proxy_theme_id,
                        text=f'<b>‚ùóÔ∏è –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞</b>'
                    )
                    return 
                    # return await MessageReply(message, '<b>‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.</b>', reply_markup=await delete_kb())
                caption = message.caption
                file_id = message.document.file_id
                file_name = message.document.file_name
                file_ext = file_name.split('.')[-1]
                # if file_ext and file_ext in ['zip', 'rar', '7z']:
                if file_ext and file_ext in ['zip']:
                    file = await bot.get_file(file_id)
                    multi_unique_id = f'{int(time.time())}-svalid-{random.randint(100000, 999999)}-{random.randint(100000, 999999)}'
                    archive_path = f'temp/{multi_unique_id}.{file_ext}'
                    output_path = f'temp/{multi_unique_id}'
                    await bot.download_file(file.file_path, f'temp/{multi_unique_id}.{file_ext}')
                    await extract_session_files(archive_path=archive_path, output_path=output_path, limit=converter_limit_accounts)
                    folders = await get_main_sessions(output_path)
                    print(f'Folders: {len(folders)} | {folders}')
                    if not folders:
                        return await MessageReply(message, '<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Å—Å–∏–∏ –≤ –∞—Ä—Ö–∏–≤–µ!</b>', reply_markup=await delete_kb())
                    total_amount = len(folders) * converter_valid_price
                    if user.balance < total_amount:
                        await MessageReply(
                            message,
                            text=(
                                f'<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>'
                                f'\n<b>‚îú –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{famount(user.balance)}$</code>'
                                f'\n<b>‚îú –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:</b> <code>{famount(total_amount)}$</code>'
                                f'\n<b>‚îî –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> <code>{famount(total_amount - user.balance)}$</code>'
                            ),
                            reply_markup=await multi_new_2_kb(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit', text2='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', callback_data2='DELETE')
                        )
                    else:
                        # await proccessing_document_t1(caption, message, folders, proxy_data)
                        await asyncio.gather(asyncio.create_task(proccessing_document_t4(bot, caption, message, folders, proxy_data, converter_valid_price)))
                else:
                    # await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip, .rar –∏–ª–∏ .7z</b>', reply_markup=await delete_kb())
                    await MessageReply(message, '<b>‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip</b>', reply_markup=await delete_kb())
            
            

    except Exception as ex:
        traceback.print_exc()
        await MessageReply(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.", reply_markup=await delete_kb())
    finally:
        await BotDeleteMessage(bot, chat_id=message.chat.id, message_id=r.message_id)

