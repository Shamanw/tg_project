from aiogram import Bot, Router, F, html
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext

from keyboards.inline.application import admin_application_kb, admin_application_ban_kb
from keyboards.inline.misc_kb import multi_kb

from database.tables import User, Application
from database.commands.users import *
from database.commands.applications import *
from database.commands.bot_settings import *

from utils.misc import *

from utils.additionally_bot import *

from config import ADMIN_ID

router = Router()


@router.callback_query(F.data == 'SUBMIT_APPLICATION')
async def submit_application_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    count_minutes = 30
    user_info = await select_user(user_id=callback.from_user.id)
    user_application = await select_application(user_id=callback.from_user.id)
    if user_info.role != 'client':
        await CallbackAnswer(callback=callback, text=f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!', show_alert=True)
    elif user_application and not await different_time(user_application.sended_at, count_minutes):
        await CallbackAnswer(callback=callback, text=f'‚ùå –í—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É!\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ {count_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.', show_alert=True)
    else:
        bt = await select_bot_setting()
        sql = await add_application(user_id=callback.from_user.id)
        fullname = f'{callback.from_user.first_name if callback.from_user.first_name is not None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}{f" {callback.from_user.last_name}" if callback.from_user.last_name is not None else ""}'
        username = f'''<a href="tg://user?id={callback.from_user.id}">{f'@{callback.from_user.username}' if callback.from_user.username is not None else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</a>'''
        text = (
            f'üîî <a href="https://t.me/{(await bot.get_me()).username}?start=u-{callback.from_user.id}">{html.bold(html.quote(fullname))}</a> <b>–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>'
            f'\n<b>‚îú ID:</b> <code>{callback.from_user.id}</code>'
            f'\n<b>‚îú –õ–æ–≥–∏–Ω:</b> {username}'
            f'\n<b>‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_info.registered_at.strftime("%d.%m.%Y –≥. –≤ %H:%M")}'
            f'\n<b>‚îî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ:</b> <code>{sql.id}</code>'
        )
        if bt.topic_id and bt.topic_applications_theme_id and bt.topic_applications_theme_id != 0:
            response = await BotSendMessage(
                bot=bot,
                chat_id=bt.topic_id,
                message_thread_id=bt.topic_applications_theme_id,
                text=text,
                reply_markup=admin_application_kb(sql.id),
                disable_web_page_preview=True
            )
            if not response:
                await BotSendMessage(
                    bot=bot,
                    chat_id=ADMIN_ID,
                    text=text,
                    reply_markup=admin_application_kb(sql.id),
                    disable_web_page_preview=True
                )
        else:
            await BotSendMessage(
                bot=bot,
                chat_id=ADMIN_ID,
                text=text,
                reply_markup=admin_application_kb(sql.id),
                disable_web_page_preview=True
            )
        await CallbackAnswer(callback=callback, text='‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', show_alert=True)


@router.callback_query(F.data == 'MY_APPLICATIONS')
async def my_applications_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    user_applications = await select_applications(user_id=callback.from_user.id)
    if not user_applications:
        user_applications_text = '<i>—É –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫</i>'
    else:
        user_applications_text = ''
        for user_application in user_applications:
            emoji_status = await get_application_status_emoji(user_application.application_status)
            application_time = user_application.sended_at.strftime("%d.%m.%Y %H:%M")
            text_status = await get_application_status(user_application.application_status)
            user_applications_text += f'{emoji_status} <i>{application_time}</i> ‚Äî <b>{text_status}</b>\n'
    await CallbackEditText(callback=callback, text=f'<b>‚úâÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏:</b>\n\n{user_applications_text}', reply_markup=multi_kb())


@router.callback_query(F.data.startswith('APPL'))
async def my_applications_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    callback_data = callback.data.split('|')
    action = callback_data[1]
    application_id = callback_data[2]
    application_info = await select_application(primary_id=application_id)
    if action == 'YES':
        bt = await select_bot_setting()
        await update_user(user_id=application_info.user_id, data={User.role: 'drop', User.calc_amount: bt.main_drop_calc_amount})
        await update_application(primary_id=application_id, data={Application.application_status: 1})
        text = str(callback.message.html_text).replace(' <b>–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>', '').replace('üîî ', '\n<b>‚îú ID: </b>')
        await CallbackEditText(callback=callback, text='<b>‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>' + text, reply_markup=await multi_new_2_kb(text='üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data=f'MNG|U|L|V|1|USD|{application_info.user_id}|1', text2='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data2='DELETE'))
        await BotSendMessage(bot=bot, chat_id=application_info.user_id, text=f'<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.')
    elif action == 'NO':
        await update_application(primary_id=application_id, data={Application.application_status: 2})
        text = str(callback.message.html_text).replace(' <b>–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>', '').replace('üîî ', '\n<b>‚îú ID: </b>')
        await CallbackEditText(callback=callback, text='<b>‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>' + text, reply_markup=multi_kb('DELETE', '‚ùå –ó–∞–∫—Ä—ã—Ç—å'))
        await BotSendMessage(bot=bot, chat_id=application_info.user_id, text=f'<b>‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>')
    elif action == 'BAN':
        notification_status = callback_data[3]
        await update_user(user_id=application_info.user_id, data={User.is_banned: 1})
        await update_application(primary_id=application_id, data={Application.application_status: 2})
        text = str(callback.message.html_text).replace(' <b>–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>', '').replace('üîî ', '\n<b>‚îú ID: </b>').replace(' –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '').replace('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>', '').replace('<b>üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>', '')
        await CallbackEditText(callback=callback, text=f'<b>üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω{" –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notification_status == "1" else ""}!</b>' + text, reply_markup=admin_application_ban_kb(application_id, '‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å', 'UNBAN'))
        if notification_status == '0':
            await BotSendMessage(bot=bot, chat_id=application_info.user_id, text=f'<b>üö´ –í–∞–º –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!</b>')
    elif action == 'UNBAN':
        notification_status = callback_data[3]
        await update_user(user_id=application_info.user_id, data={User.is_banned: 0})
        text = str(callback.message.html_text).replace(' <b>–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É</b>', '').replace('üîî ', '\n<b>‚îú ID: </b>').replace(' –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '').replace('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>', '').replace('<b>üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>', '')
        await CallbackEditText(callback=callback, text=f'<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω{" –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notification_status == "1" else ""}!</b>' + text, reply_markup=admin_application_ban_kb(application_id, 'üö´ –ó–∞–±–∞–Ω–∏—Ç—å', 'BAN'))
        if notification_status == '0':
            await BotSendMessage(bot=bot, chat_id=application_info.user_id, text=f'<b>‚úÖ –í–∞–º –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!</b>')

