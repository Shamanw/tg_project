import time
import random
import asyncio

from aiogram import Bot, Router, F, html
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext

from datetime import datetime
from collections import defaultdict

from database.commands.users import *
from database.commands.groups import *
from database.commands.phones_queue import *
from utils.misc import *
from utils.additionally_bot import *
# from utils.misc import different_time, get_phone_type_text, get_phone_type_emoji, get_phones_queue_status_type, get_phone_queue, get_phones_queue, find_inds

from config import *

router = Router()
record_locks = defaultdict(asyncio.Lock)
group_photo_locks = defaultdict(asyncio.Lock)
group_record_locks = defaultdict(asyncio.Lock)
group_record_locks2 = defaultdict(asyncio.Lock)


# async def update_group_info(bot, message):
#     try:
#         group_id = message.chat.id
#         group_info = await select_group(group_id=group_id)
#     except:
#         group_info = None
#     if group_info:
#         try:
#             if not group_info.group_link or group_info.group_name != message.chat.title:
#                 await update_group(
#                     group_id=group_id,
#                     data={
#                         Group.group_name: message.chat.title,
#                         Group.group_link: (await bot.create_chat_invite_link(chat_id=group_id)).invite_link if not group_info.group_link else Group.group_link,
#                         Group.updated_at: datetime.now()
#                     }
#                 )
#         except:
#             try:
#                 if group_info.group_name != message.chat.title:
#                     await update_group(group_id=group_id, data={Group.group_name: message.chat.title, Group.updated_at: datetime.now()})
#             except:
#                 pass


# @router.callback_query(F.data.startswith('QUEUE'))
# async def group_queue_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
#     await state.clear()
#     group_id = callback.message.chat.id
#     group_info = await select_group(group_id=group_id)
#     if group_info and group_info.work_status == 1:
#         await update_group_info(bot, callback.message)
#         callback_data = callback.data.split('|')
#         action = callback_data[1]
#         primary_id = int(callback_data[2])
#         lock = record_locks[primary_id]
#         async with lock:
#             await asyncio.sleep(random.uniform(0.5, 0.9))
#             write = await select_phone_queue(primary_id=primary_id)
#             if not write:
#                 return await CallbackAnswer(callback, text='‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
#             if write.client_id is None:
#                 return await CallbackAnswer(callback, text='‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!', show_alert=True)
#             if write.client_id != callback.from_user.id and callback.from_user.id != ADMIN_ID:
#                 return await CallbackAnswer(callback, text='‚õîÔ∏è –î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!')

#             if action == 'SMS':
#                 if write.status != 14:
#                     return await CallbackAnswer(callback, text='üö´ –î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!', show_alert=True)
#                 else:
#                     await update_phone_queue(
#                         primary_id=write.id,
#                         data={
#                             PhoneQueue.status: 15,
#                             PhoneQueue.updated_at: datetime.now()
#                         }
#                     )
#                     await CallbackEditText(
#                         callback,
#                         text=(
#                             f'<b>‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞:</b> <code>{write.phone_number}</code>'
#                             f'\n\n<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, —É –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç!</b>'
#                             f'<a href="tg://sql?write_id={write.id}">\u2063</a>'
#                         ),
#                         reply_markup=None
#                         # reply_markup=multi_kb(
#                         #     text='‚úÖ', callback_data=f'QUEUE|SCCS|{write.id}',
#                         # )
#                     )

#             # elif action == 'SCCS':
#             #     if write.status != 15:
#             #         return await CallbackAnswer(callback, text='üö´ –î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!', show_alert=True)
#             #     else:
#             #         await update_phone_queue(
#             #             primary_id=write.id,
#             #             data={
#             #                 PhoneQueue.status: 17,
#             #                 PhoneQueue.updated_at: datetime.now(),
#             #                 PhoneQueue.buyed_at: datetime.now(),
#             #                     calc_amount
#             #             }
#             #         )
#             #         await CallbackEditText(
#             #             callback,
#             #             text=(
#             #                 f'<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</b> <code>{write.phone_number}</code>'
#             #                 f'\n<b>üîë –ü–∞—Ä–æ–ª—å:</b> <code>{write.password}</code>'
#             #                 f'\n<b>‚úâÔ∏è –ö–æ–¥:</b> <code>{write.last_auth_code}</code>'
#             #                 f'<a href="tg://sql?write_id={write.id}">\u2063</a>'
#             #             ),
#             #             reply_markup=None
#             #         )


# @router.message()
# async def message_handler(message: Message, bot: Bot):
#     group_id = message.chat.id
#     try:
#         sent_message = message.text.strip().replace(' ', '').lower()
#     except:
#         sent_message = False
#     if sent_message:
#         group_info = await select_group(group_id=group_id)
#         if sent_message.startswith('/gadd') or sent_message.startswith('/tadd'):
#             user_info = await select_user(user_id=message.from_user.id)
#             if user_info.role == 'admin' or message.from_user.id == ADMIN_ID:
#                 group_info = await select_group(group_id=group_id)
#                 if not group_info:
#                         try:
#                             group_name = (await bot.get_chat(chat_id=group_id)).title
#                         except:
#                             group_name = None
#                         try:
#                             group_link = (await bot.create_chat_invite_link(chat_id=group_id)).invite_link
#                         except:
#                             group_link = None
#                         await add_group(group_id=group_id, group_link=group_link, group_name=group_name)
#                         await MessageReply(message, text='<b>‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>')
#                 elif group_info and group_info.work_status == 0:
#                     await update_group(group_id=group_id, data={Group.work_status: 1})
#                     await MessageReply(message, text='<b>‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>')
#                 else:
#                     await MessageReply(message, text='<b>‚ùå –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>')
#             else:
#                 await MessageReply(message, text='<b>‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã!</b>')
#         elif sent_message.startswith('/gdel') or sent_message.startswith('/tdel'):
#             user_info = await select_user(user_id=message.from_user.id)
#             if user_info.role == 'admin' or message.from_user.id == ADMIN_ID:
#                 group_info = await select_group(group_id=group_id)
#                 user_info = await select_user(user_id=message.from_user.id)
#                 if group_info and group_info.work_status == 1:
#                     await update_group(group_id=group_id, data={Group.work_status: 0})
#                     await MessageReply(message, text='<b>üóë –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>')
#                 elif group_info and group_info.work_status == 0:
#                     await MessageReply(message, text='<b>‚ùå –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞!</b>')
#                 else:
#                     await MessageReply(message, text='<b>‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!</b>')
#             else:
#                 await MessageReply(message, text='<b>‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã!</b>')
#         else:
#             if group_info and group_info.work_status == 1:
#                 await update_group_info(bot, message)
#                 if sent_message == 'tg' or sent_message == '—Ç–≥' or sent_message.startswith('/tg') or sent_message.startswith('/telegram'):
#                     lock = group_record_locks[group_id]
#                     async with lock:
#                         bt = await select_bot_setting()
#                         if bt.get_phones_status == 0:
#                             return await MessageReply(
#                                 message,
#                                 text=(
#                                     f'<b>‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–¥–∞—á–∞ –Ω–æ–º–µ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!</b>'
#                                 )
#                             )

#                         write = await select_phone_queue(status=12)
#                         if not write:
#                             await MessageReply(
#                                 message,
#                                 text=(
#                                     f'<b>‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!</b>'
#                                 )
#                             )
#                         else:
#                             await update_phone_queue(
#                                 primary_id=write.id,
#                                 data={
#                                     PhoneQueue.client_id: message.from_user.id,
#                                     PhoneQueue.group_id: group_id,
#                                     PhoneQueue.status: 14,
#                                     PhoneQueue.group_user_message_id: message.message_id,
#                                     PhoneQueue.updated_at: datetime.now(),
#                                 }
#                             )
#                             response = await MessageReply(
#                                 message,
#                                 text=(
#                                     f'<b>üì± –ù–æ–º–µ—Ä:</b> <code>{write.phone_number}</code>'
#                                     '\n\n<b>‚ùóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–µ –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞!</b>'
#                                 ),
#                                 reply_markup=multi_kb(
#                                     text='üì© –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data=f'QUEUE|SMS|{write.id}'
#                                 )
#                             )   
#                             await update_phone_queue(
#                                 primary_id=write.id,
#                                 data={
#                                     PhoneQueue.group_bot_message_id: response.message_id,
#                                 }
#                             )

#                 elif (sent_message in ['—Å–ª–µ—Ç', '—Å–ª—ë—Ç', 'slet'] or sent_message.startswith('/slet')) and \
#                     message.reply_to_message and \
#                     message.reply_to_message.from_user.id == bot.id:
#                     # print(message.reply_to_message)
#                 # elif sent_message == '—Å–ª–µ—Ç' or sent_message == '—Å–ª—ë—Ç' or sent_message == 'slet' or sent_message.startswith('/slet') and message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
#                     primary_id = await extract_write_id(text=message.reply_to_message.html_text)
#                     if primary_id:
#                         lock = group_record_locks2[primary_id]
#                         async with lock:
#                             write = await select_phone_queue(primary_id=primary_id)
#                             if write:
#                                 group_info = await select_group(group_id=write.group_id)
#                                 if group_info:
#                                     # if await different_time(write.get_sms_at, group_info.cross_timeout if write.phone_type == 0 else group_info.cross_timeout_tg) and write.get_sms_status != 6 and write.get_sms_status != 12 and write.get_sms_status != 3 and write.get_sms_status != 17:
#                                     if (group_info and not await different_time(write.updated_at, group_info.cross_timeout) and write.status in [15, 17]) or message.from_user.id == ADMIN_ID:
#                                         if write.status == 15:
#                                             await MessageReply(message=message, text=f'<b>‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Å–ª—ë—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞!</b>')
#                                         elif write.status == 17:
#                                             await update_phone_queue(primary_id=write.id, data={PhoneQueue.status: 18, PhoneQueue.slet_at: datetime.now()})
#                                             await MessageReply(
#                                                 message, 
#                                                 text=(
#                                                     f'<b>üí¢ –°–ª—ë—Ç (-1)</b>'
#                                                 )
#                                             )
#                                             if write.group_bot_message_id:
#                                                 await BotEditText(
#                                                     bot,
#                                                     chat_id=group_id,
#                                                     message_id=write.group_bot_message_id,
#                                                     text=(
#                                                         f'<b>üí¢ –°–ª—ë—Ç (-1):</b> <code>{write.phone_number}</code>'
#                                                         f'\n<b>üîë –ü–∞—Ä–æ–ª—å:</b> <code>{write.password}</code>'
#                                                         f'\n<b>‚úâÔ∏è –ö–æ–¥:</b> <code>{write.last_auth_code}</code>'
#                                                     )
#                                                 )
#                                     else:
#                                         await MessageReply(message=message, text=f'<b>‚õîÔ∏è –î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!</b>')
#                                 else:
#                                     await MessageReply(message=message, text=f'<b>‚õîÔ∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</b>')
#                             else:
#                                 await MessageReply(message=message, text=f'<b>‚õîÔ∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>')
#                     else:
#                         await MessageReply(message=message, text=f'<b>‚õîÔ∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>')


#                 elif sent_message == '—Å—Ç–∞—Ç–∞' or sent_message == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or sent_message == 'stats' or sent_message.startswith('/stats'):
#                     group_info = await select_group(group_id=group_id)
#                     if not group_info:
#                         return await MessageReply(message, '<b>‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!</b>')
#                     await MessageAnswer(
#                         message,
#                         text=(
#                             '\n\n<b>‚òÄÔ∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>'
#                             f'\n<b>‚îú –í—ã–¥–∞–Ω–Ω—ã—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=17, buyed_at_00_00=True))}</code>'
#                             f'\n<b>‚îî –°–ª–µ—Ç–µ–≤—à–∏—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=18, slet_at_00_00=True))}</code>'

#                             '\n\n<b>üåë –ó–∞ –≤—á–µ—Ä–∞:</b>'
#                             f'\n<b>‚îú –í—ã–¥–∞–Ω–Ω—ã—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=17, buyed_at_yesterday=True))}</code>'
#                             f'\n<b>‚îî –°–ª–µ—Ç–µ–≤—à–∏—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=18, slet_at_yesterday=True))}</code>'

#                             '\n\n<b>üóí –° –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏:</b>'
#                             f'\n<b>‚îú –í—ã–¥–∞–Ω–Ω—ã—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=17, buyed_at_week=True))}</code>'
#                             f'\n<b>‚îî –°–ª–µ—Ç–µ–≤—à–∏—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=18, slet_at_week=True))}</code>'

#                             '\n\n<b>üóì –° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:</b>'
#                             f'\n<b>‚îú –í—ã–¥–∞–Ω–Ω—ã—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=17, buyed_at_month=True))}</code>'
#                             f'\n<b>‚îî –°–ª–µ—Ç–µ–≤—à–∏—Ö:</b> <code>{len(await select_phone_queues(group_id=group_info.group_id, status=18, slet_at_month=True))}</code>'
#                         )
#                     )