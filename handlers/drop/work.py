from aiogram_imports import *
from common_imports import *
from utils.misc import *

from keyboards.reply.main_kb import *
from keyboards.inline.main_kb import *
from keyboards.inline.misc_kb import *
from keyboards.inline.drop_kb import *


router = Router()
withdraw_locks = defaultdict(asyncio.Lock)
appeal_locks = defaultdict(asyncio.Lock)


@router.callback_query(F.data.startswith('DROP_WORK'))
async def main_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    callback_data = callback.data.split('|')
    action = callback_data[1]
    

    if action == 'MANUAL':
        await update_user(user_id=callback.from_user.id, data={User.manual_read_status: 1})
        us = await select_user(user_id=callback.from_user.id)
        await CallbackMessageAnswer(callback, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=show_menu_kb)
        return await CallbackEditText(callback, text=await drop_start_text(us=us), reply_markup=await drop_menu_kb(us=us))


    if action == 'START':
        user_info = await select_user(user_id=callback.from_user.id)
        if user_info.unban_at and user_info.unban_at > datetime.now():
            return await CallbackAnswer(
                callback, 
                text=f'‚ö†Ô∏è –ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–∞ –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ {user_info.unban_at.strftime("%d.%m %H:%M")} –ø–æ –ú–°–ö.', 
                show_alert=True
            )
        
        await update_user(user_id=callback.from_user.id, data={User.is_work: 1, User.writes_skip_count: 0})
        await update_phone_queue(drop_id=callback.from_user.id, status=12, data={PhoneQueue.status: 0})
        us = await select_user(user_id=callback.from_user.id)
        await CallbackEditText(callback, text=await drop_start_text(us=us), reply_markup=await drop_menu_kb(us=us))


        bt = await select_bot_setting()
        if bt.topic_id and bt.topic_works_theme_id:
            main_bot = await bot_authorization(bot, bot_token=MAIN_BOT_TOKEN)
            if main_bot:
                fullname = f'{callback.from_user.first_name if callback.from_user.first_name is not None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}{f" {callback.from_user.last_name}" if callback.from_user.last_name is not None else ""}'
                username = f'''<a href="tg://user?id={callback.from_user.id}">{f'@{callback.from_user.username}' if callback.from_user.username is not None else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</a>'''
                text = (
                    f'<b>üü¢ –ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É: <a href="https://t.me/{(await main_bot.get_me()).username}?start=u-{callback.from_user.id}">{html.escape(str(fullname))}</a></b>'
                    f'\n‚Ä¢ <b>ID:</b> <code>{callback.from_user.id}</code> | <b>US:</b> {username}'
                )
                await BotSendMessage(main_bot, chat_id=bt.topic_id, message_thread_id=bt.topic_works_theme_id, text=text)

    if action == 'STOP':
        await update_user(user_id=callback.from_user.id, data={User.is_work: 0, User.writes_skip_count: 0})
        await update_phone_queue(drop_id=callback.from_user.id, status=0, data={PhoneQueue.status: 12})
        us = await select_user(user_id=callback.from_user.id)
        await CallbackEditText(callback, text=await drop_start_text(us=us), reply_markup=await drop_menu_kb(us=us))

        bt = await select_bot_setting()
        if bt.topic_id and bt.topic_works_theme_id:
            main_bot = await bot_authorization(bot, bot_token=MAIN_BOT_TOKEN)
            if main_bot:
                fullname = f'{callback.from_user.first_name if callback.from_user.first_name is not None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}{f" {callback.from_user.last_name}" if callback.from_user.last_name is not None else ""}'
                username = f'''<a href="tg://user?id={callback.from_user.id}">{f'@{callback.from_user.username}' if callback.from_user.username is not None else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</a>'''
                text = (
                    f'<b>üî¥ –ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É: <a href="https://t.me/{(await main_bot.get_me()).username}?start=u-{callback.from_user.id}">{html.escape(str(fullname))}</a></b>'
                    f'\n‚Ä¢ <b>ID:</b> <code>{callback.from_user.id}</code> | <b>US:</b> {username}'
                )
                await BotSendMessage(main_bot, chat_id=bt.topic_id, message_thread_id=bt.topic_works_theme_id, text=text)


    if action == 'ADD_PHONES':
        bt = await select_bot_setting()
        if bt.added_phones_status == 0:
            return await CallbackAnswer(
                callback, 
                text=(
                    '‚ö†Ô∏è –ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!'
                    '\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.'
                ), 
                show_alert=True
            )
        user_info = await select_user(user_id=callback.from_user.id)
        await CallbackEditText(
            callback,
            text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –†–§, –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>',
            reply_markup=await custom_kb()
        )
        await state.set_state(AddPhones.wait_value)


    if action == 'PQUEUE':
        action = callback_data[2]
        page = int(callback_data[3])
        if action == 'DEL':
            primary_id = int(callback_data[4])
            write = await select_phone_queue(primary_id=primary_id)
            if write and write.status == 0 and write.drop_id == callback.from_user.id:
                user_info = await select_user(user_id=callback.from_user.id)
                await update_phone_queue(primary_id=primary_id, data={PhoneQueue.status: 14})
                await update_user(user_id=callback.from_user.id, data={User.added_count: user_info.added_count - 1 if user_info.added_count >= 1 else 0})
            else:
                await CallbackAnswer(callback, text='‚õîÔ∏è –î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å!')
        total_items = await select_many_records(PhoneQueue, count=True, drop_id=callback.from_user.id, status_in=[0,12])
        await CallbackEditText(
            callback,
            text=(
                '<b>‚è≥ –ù–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏</b>'
                '\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏</i>'
            ),
            reply_markup=await get_added_phones(
                user_id=callback.from_user.id, 
                total_items=total_items, 
                page=page
            )
        )


    if action == 'P':
        found_text = ''
        action = callback_data[2]

        if action == 'I':
            await CallbackEditText(
                callback, 
                text=(
                    '<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>'
                    f'\n<i>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é</i>'
                ), 
                reply_markup=await drop_archive_menu_kb(user_id=callback.from_user.id)
            )

        elif action == 'N':
            action = callback_data[3]
            if action == 'M':
                period = callback_data[4]
                page = int(callback_data[5])
                total_items = await select_many_records(PhoneQueue, count=True, drop_id=callback.from_user.id, added_at=period)
                
                # if not total_items:
                #     return await CallbackAnswer(
                #         callback, 
                #         text=f'‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ {await get_time_at_period(period)}', 
                #         show_alert=True
                #     )
                if total_items:
                    found_text = f'\n\n<b>‚Üí –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> <code>{total_items}</code>'
                await CallbackEditText(
                    callback,
                    text=(
                        f'<b>üìÅ –ê—Ä—Ö–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ {await get_time_at_period(period)}</b>'
                        '\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏</i>'
                        f'{found_text}'
                    ),
                    reply_markup=await get_drop_list_phones_kb(
                        user_id=callback.from_user.id, 
                        total_items=total_items,
                        period=period,
                        page=page
                    )
                )
            elif action == 'O':
                action = callback_data[4]
                primary_id = int(callback_data[5])
                write = await select_phone_queue(primary_id=primary_id)
                if not write:
                    return await CallbackAnswer(callback,  text='‚ùì –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
                if write.drop_id != callback.from_user.id:
                    return await CallbackAnswer(callback,  text='üîí –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.', show_alert=True)
                text = await get_write_info_for_drop(write)
                reply_markup = await custom_v2_kb(
                    text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='DELETE',
                    text2='–û–±–Ω–æ–≤–∏—Ç—å', callback_data2=f'DROP_WORK|P|N|O|U|{write.id}',
                )
                if action == 'V':
                    await CallbackMessageAnswer(callback, text=text, reply_markup=reply_markup)
                if action == 'U':
                    await CallbackEditText(callback, text=text, reply_markup=reply_markup)

        elif action == 'C':
            action = callback_data[3]
            if action == 'M':
                period = callback_data[4]
                page = int(callback_data[5])
                total_items = await select_many_records(PhoneQueue, count=True, drop_id=callback.from_user.id, slet_at=period, check_id_is_not_none=True)
                
                # if not total_items:
                #     return await CallbackAnswer(
                #         callback, 
                #         text=f'‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–æ–≤ –∑–∞ {await get_time_at_period(period)}', 
                #         show_alert=True
                #     )
                
                items_per_page = 12
                offset = (page - 1) * items_per_page
                total_pages = (total_items + items_per_page - 1) // items_per_page
                writes = await select_many_records(
                    PhoneQueue,
                    drop_id=callback.from_user.id, 
                    sort_desc='slet_at', 
                    slet_at=period,
                    check_id_is_not_none=True,
                    limit=items_per_page,
                    offset=offset,
                )
                text = ''
                if writes:
                    found_text = f'\n\n<b>‚Üí –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> <code>{total_items}</code>'
                    for write in writes:
                        text += (
                            f'\n<b>‚Üí <code>{write.phone_number}</code> ‚Ä¢ <a href="http://t.me/send?start={write.check_id}">{write.check_id}</a>'
                            f'{f" ‚Ä¢ <code>{write.calc_amount - write.referrer_calc_amount}$</code>" if write.calc_amount > 0 and write.referrer_calc_amount is not None else ""}</b>'
                        )
                else:
                    text += f'\n<i>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–æ–≤ –∑–∞ {await get_time_at_period(period)}</i>'
                await CallbackEditText(
                    callback,
                    text=(
                        f'<b>üìÅ –ê—Ä—Ö–∏–≤ —á–µ–∫–æ–≤</b>'
                        '\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</i>'
                        f'{found_text}'
                        f'\n{text}'
                    ),
                    reply_markup=await get_drop_list_checks_kb(
                        period=period,
                        total_pages=total_pages,
                        page=page
                    )
                )
                

        elif action == 'W':
            action = callback_data[3]
            if action == 'M':
                period = callback_data[4]
                page = int(callback_data[5])
                total_items = await select_many_records(Withdraw, count=True, user_id=callback.from_user.id, created_at=period)
                
                # if not total_items:
                #     return await CallbackAnswer(
                #         callback, 
                #         text=f'‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –∑–∞ {await get_time_at_period(period)}', 
                #         show_alert=True
                #     )
                
                items_per_page = 12
                offset = (page - 1) * items_per_page
                total_pages = (total_items + items_per_page - 1) // items_per_page
                writes = await select_many_records(
                    Withdraw,
                    user_id=callback.from_user.id, 
                    created_at=period,
                    sort_desc='created_at', 
                    limit=items_per_page,
                    offset=offset
                )
                text = ''
                if writes:
                    found_text = f'\n\n<b>‚Üí –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> <code>{total_items}</code>'
                    for write in writes:
                        text += (
                            f'\n<b>‚Üí {await get_withdraw_status_emoji(write.withdraw_status)} {await get_withdraw_status(write.withdraw_status)}:'
                            f' <code>{write.created_at.strftime("%d.%m.%Y %H:%M")}</code>'
                            f'''{f' ‚Ä¢ <a href="http://t.me/send?start={write.check_id}">{write.check_id}</a>' if write.check_id else ''}'''
                            f'{f" ‚Ä¢ <code>{write.amount}$</code>" if write.amount else ""}</b>'
                        )
                else:
                    text += f'\n<i>–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –∑–∞ {await get_time_at_period(period)}</i>'

                await CallbackEditText(
                    callback,
                    text=(
                        f'<b>üìÅ –ê—Ä—Ö–∏–≤ –≤—ã–≤–æ–¥–æ–≤</b>'
                        '\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</i>'
                        f'{found_text}'
                        f'\n{text}'
                    ),
                    reply_markup=await get_drop_list_withdraws_kb(
                        period=period,
                        total_pages=total_pages,
                        page=page
                    )
                )


    if action == 'STAT':
        hold_query = select_phone_queues(drop_id=callback.from_user.id, status=4, waiting_confirm_status=0)
        confirmed_query = select_phone_queues(drop_id=callback.from_user.id, status=4, waiting_confirm_status=1)
        failed_query = select_phone_queues(drop_id=callback.from_user.id, status=5)
        repeated_query = select_phone_queues(drop_id=callback.from_user.id, status=6)
        missed_query = select_phone_queues(drop_id=callback.from_user.id, status=7)
        
        in_progress_statuses = [1, 2, 3]
        limit_query = select_phone_queues(drop_id=callback.from_user.id, statuses=[0] + in_progress_statuses)
        queue_query = select_phone_queues(drop_id=callback.from_user.id, status=0)
        processing_query = select_phone_queues(drop_id=callback.from_user.id, statuses=in_progress_statuses)
        total_queue_query = select_phone_queues(status=0)
        total_processing_query = select_phone_queues(statuses=in_progress_statuses)
        
        results = await asyncio.gather(
            select_user(user_id=callback.from_user.id),
            select_bot_setting(),
            hold_query, confirmed_query, failed_query, 
            repeated_query, missed_query, limit_query,
            queue_query, processing_query,
            total_queue_query, total_processing_query
        )
        
        user_info, bot_settings = results[0], results[1]
        hold_count, confirmed_count, failed_count = len(results[2]), len(results[3]), len(results[4])
        repeated_count, missed_count, limit_count = len(results[5]), len(results[6]), len(results[7])
        queue_count, processing_count = len(results[8]), len(results[9])
        total_queue_count, total_processing_count = len(results[10]), len(results[11])

        await CallbackEditText(
            callback,
            text=(
                '<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>'
                f'\n‚îú <b>–í —Ö–æ–ª–¥–µ:</b> <code>{hold_count}</code>'
                f'\n‚îú <b>–ó–∞—Å—á–∏—Ç–∞–Ω–æ:</b> <code>{confirmed_count}</code>'
                f'\n‚îú <b>–°–ª—ë—Ç–æ–≤:</b> <code>{failed_count}</code>'
                f'\n‚îú <b>–ü–æ–≤—Ç–æ—Ä–æ–≤:</b> <code>{repeated_count}</code>'
                f'\n‚îú <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</b> <code>{missed_count}</code>'
                f'\n‚îî <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> <code>{user_info.added_count}</code>'

                '\n\n<b>‚ÑπÔ∏è –ù–æ–º–µ—Ä–∞</b>'
                f'\n‚îú <b>–í–∞—à –ª–∏–º–∏—Ç:</b> <code>{limit_count}</code>/<code>{bot_settings.limit_wa}</code>'
                f'\n‚îú <b>–í –æ—á–µ—Ä–µ–¥–∏:</b> <code>{queue_count}</code>'
                f'\n‚îú <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> <code>{processing_count}</code>'
                f'\n‚îú <b>–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> <code>{total_queue_count}</code>'
                f'\n‚îî <b>–í—Å–µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> <code>{total_processing_count}</code>'
            ),
            reply_markup=await update_v2_kb(callback_data='DROP_WORK|STAT')
        )


    if action == 'Y':
        primary_id = callback_data[2]
        write = await select_phone_queue(primary_id=primary_id)
        if write and (write.status == 3 or write.status == 18) and write.drop_id == callback.from_user.id:
            if write.status == 3:
                await update_phone_queue(
                    primary_id=write.id,
                    data={
                        PhoneQueue.status: 4,
                        PhoneQueue.confirmed_at: datetime.now(),
                        PhoneQueue.updated_at: datetime.now(),
                    }
                )
            elif write.status == 18:
                await update_phone_queue(
                    primary_id=write.id,
                    data={
                        PhoneQueue.appeal_status: 1,
                        PhoneQueue.status: 4,
                        PhoneQueue.slet_at: None,
                        PhoneQueue.updated_at: datetime.now(),
                    }
                )
            await update_user(user_id=write.drop_id, data={User.writes_skip_count: 0})
            text = f'<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</b> <code>{write.phone_number}</code>'
            await CallbackEditCaption(callback, caption=text, reply_markup=None)
            response = await BotSendMessage(
                await bot_authorization(bot, bot_id=write.group_bot_id), 
                chat_id=write.group_id, 
                reply_to_message_id=write.group_user_message_id, 
                text=text, 
                reply_markup=await custom_2_kb(
                    text='‚ùå', callback_data=f'QUEUE|SLET|{write.id}',
                    text2='‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', callback_data2=f'QUEUE|ERROR|{write.id}|0'
                )
            )
            if response:
                await update_phone_queue(
                    primary_id=write.id,
                    data={
                        PhoneQueue.group_bot_message_id: response.message_id,
                    }
                )
        else:
            await CallbackEditCaption(
                callback,
                caption=f'<b>‚õîÔ∏è –ó–∞–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞:</b> <code>{write.phone_number}</code>',
                reply_markup=None
            )


    if action == 'N':
        primary_id = callback_data[2]
        write = await select_phone_queue(primary_id=primary_id)
        if write and (write.status == 3 or write.status == 18) and write.drop_id == callback.from_user.id:
            if write.status == 3:
                if (write.skip_count + 1) >= 2:
                    await update_phone_queue(
                        primary_id=write.id,
                        data={
                            PhoneQueue.status: 6,
                            PhoneQueue.updated_at: datetime.now(),
                            PhoneQueue.skip_count: PhoneQueue.skip_count + 1
                        }
                    )
                    await update_user(user_id=write.drop_id, data={User.writes_skip_count: 0})
                    await CallbackEditCaption(
                        callback, 
                        caption=f'<b>‚ùå –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤:</b> <code>{write.phone_number}</code>', 
                        reply_markup=None
                    )
                    await BotSendMessage(
                        await bot_authorization(bot, bot_id=write.group_bot_id), 
                        chat_id=write.group_id, 
                        reply_to_message_id=write.group_user_message_id, 
                        text=f'<b>üö´ WhatsApp –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{write.phone_number}</code> –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å. –í–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ /nomer</b>'
                    )
                else:
                    await update_phone_queue(
                        primary_id=write.id,
                        data={
                            PhoneQueue.status: 2,
                            PhoneQueue.updated_at: datetime.now(),
                            PhoneQueue.skip_count: PhoneQueue.skip_count + 1
                        }
                    )
                    await update_user(user_id=write.drop_id, data={User.writes_skip_count: 0})
                    await CallbackEditCaption(
                        callback, 
                        caption=f'<b>‚ùå –û—Ç–º–µ–Ω—ë–Ω:</b> <code>{write.phone_number}</code>', 
                        reply_markup=None
                    )
                    text = (
                        f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å WhatsApp <code>{write.phone_number}</code>, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–π –∫–æ–¥.</b>'
                        '\n\n<b>‚ùóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–µ –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞!</b>'
                        f'<a href="tg://sql?write_id={write.id}">\u2063</a>'
                    )
                    response = await BotSendMessage(
                        await bot_authorization(bot, bot_id=write.group_bot_id), 
                        chat_id=write.group_id, 
                        reply_to_message_id=write.group_user_message_id, 
                        text=text
                    )
                    if response:
                        await update_phone_queue(
                            primary_id=write.id,
                            data={
                                PhoneQueue.group_bot_message_id: response.message_id,
                            }
                        )

            elif write.status == 18:
                await update_phone_queue(
                    primary_id=write.id,
                    data={
                        PhoneQueue.status: 5,
                        PhoneQueue.updated_at: datetime.now(),
                    }
                )
                await update_user(user_id=write.drop_id, data={User.writes_skip_count: 0})
                await CallbackEditCaption(
                    callback,
                    caption=f'<b>‚ùå –°–ª—ë—Ç:</b> <code>{write.phone_number}</code>',
                    reply_markup=None
                )
                await BotSendMessage(
                    await bot_authorization(bot, bot_id=write.group_bot_id), 
                    chat_id=write.group_id, 
                    reply_to_message_id=write.group_user_message_id, 
                    text=f'<b>üö´ WhatsApp –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{write.phone_number}</code> –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å. –í–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ /nomer</b>'
                )
        else:
            await CallbackEditCaption(
                callback,
                caption=f'<b>‚õîÔ∏è –ó–∞–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞:</b> <code>{write.phone_number}</code>',
                reply_markup=None
            )


    if action == 'APPEAL':
        primary_id = int(callback_data[2])
        async with appeal_locks[primary_id]:
            write = await select_phone_queue(primary_id=primary_id)
            if not write:
                await CallbackEditText(callback, text=str(callback.message.html_text), reply_markup=None)
                return await CallbackAnswer(callback, text='‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
            if write.drop_id != callback.from_user.id:
                await CallbackEditText(callback, text=str(callback.message.html_text), reply_markup=None)
                return await CallbackAnswer(callback, text='‚ùå –î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!', show_alert=True)
            if write.status != 5 or write.appeal_status != 0 or write.admin_appeal_confirm_status != 0:
                await CallbackEditText(callback, text=str(callback.message.html_text), reply_markup=None)
                return await CallbackAnswer(callback, text='‚ùå –î–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ–±–∂–∞–ª–æ–≤–∞—Ç—å!', show_alert=True)
            if await different_time(write.slet_at, 3):
                await CallbackEditText(callback, text=str(callback.message.html_text), reply_markup=None)
                return await CallbackAnswer(callback, text='‚ùå –î–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ–±–∂–∞–ª–æ–≤–∞—Ç—å!', show_alert=True)
            bt = await select_bot_setting()
            if bt.topic_id and bt.topic_slet_applications_theme_id and bt.topic_slet_applications_theme_id != 0:
                main_bot = await bot_authorization(bot, bot_token=MAIN_BOT_TOKEN)
                if main_bot:
                    await update_phone_queue(primary_id=primary_id, data={PhoneQueue.appeal_status: 1})
                    fullname = f'{callback.from_user.first_name if callback.from_user.first_name is not None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}{f" {callback.from_user.last_name}" if callback.from_user.last_name is not None else ""}'
                    username = f'''<a href="tg://user?id={callback.from_user.id}">{f'@{callback.from_user.username}' if callback.from_user.username is not None else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</a>'''
                    text = (
                            f'<b>‚ÅâÔ∏è <a href="https://t.me/{(await main_bot.get_me()).username}?start=u-{callback.from_user.id}">{html.escape(str(fullname))}</a> –ø—Ä–æ—Å–∏—Ç –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —Å–ª—ë—Ç</b>'
                            f'\n\n‚Ä¢ <b>ID:</b> <code>{callback.from_user.id}</code> | <b>US:</b> {username}'
                            f'\n\n{await get_qr_code_info(write)}'
                        )
                    reply_markup = await custom_2_kb(
                        text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'APPEAL|YES|{primary_id}',
                        text2='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data2=f'APPEAL|NO|{primary_id}',
                    )
                    await BotSendMessage(main_bot, chat_id=bt.topic_id, message_thread_id=bt.topic_slet_applications_theme_id, text=text, reply_markup=reply_markup)
                    await CallbackEditText(callback, text=str(callback.message.html_text), reply_markup=None)
            else:
                return await CallbackAnswer(callback, text='‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–µ–ª—å–∑—è –æ–±–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.', show_alert=True)


    if action == 'REF':
        action = callback_data[2]
        if action == 'M':
            user, bot_settings, today_refs, yesterday_refs, week_refs, month_refs, all_refs, active_refs, total_withdraws = await asyncio.gather(
                select_user(user_id=callback.from_user.id),
                select_bot_setting(),
                select_users(referrer_id=callback.from_user.id, period_registered_at="today"),
                select_users(referrer_id=callback.from_user.id, period_registered_at="yesterday"),
                select_users(referrer_id=callback.from_user.id, period_registered_at="start_week"),
                select_users(referrer_id=callback.from_user.id, period_registered_at="start_month"),
                select_users(referrer_id=callback.from_user.id),
                select_users(referrer_id=callback.from_user.id, role="drop", is_banned=0),
                get_total_withdraws_amount(user_id=callback.from_user.id)
            )

            if not user.user_hash:
                user_hash = await generate_random_code()
                await update_user(user_id=callback.from_user.id, data={User.user_hash: user_hash})
                user = await select_user(user_id=callback.from_user.id)

            if user.part_referral_amount_max <= 0:
                await update_user(user_id=callback.from_user.id, data={User.part_referral_amount_max: bot_settings.drop_ref_max})
                user = await select_user(user_id=callback.from_user.id)

            await CallbackEditText(
                callback,
                text=(
                    '<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>'
                    f'\n<i>–ü–æ–ª—É—á–∞–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É —Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.</i>'

                    f'\n\n<b>üÜî –í–∞—à ID:</b> <code>{callback.from_user.id}</code>'

                    f'\n\n<b>üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>'
                    f'\n‚îú <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{len(today_refs)}</code>'
                    f'\n‚îú <b>–ó–∞ –≤—á–µ—Ä–∞:</b> <code>{len(yesterday_refs)}</code>'
                    f'\n‚îú <b>–° –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏:</b> <code>{len(week_refs)}</code>'
                    f'\n‚îú <b>–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:</b> <code>{len(month_refs)}</code>'
                    f'\n‚îî <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> <code>{len(all_refs)}</code>'

                    f'\n\n<b>üßë‚Äçüíª –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{len(active_refs)}</code>'

                    f'\n\n<b>üí∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <code>{user.part_referral_amount}$</code> –∏–∑ <code>{user.part_referral_amount_max}$</code> –∑–∞ –Ω–æ–º–µ—Ä</b>'
                    
                    f'\n\n<b>üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> <code>{famount(total_withdraws + user.ref_balance)}$</code>'
                    f'\n<b>üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:</b> <code>{famount(user.ref_balance)}$</code>'

                    '\n\n<b>üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>'
                    f'\n‚Üí <code>https://t.me/{(await bot.get_me()).username}?start={user.user_hash}</code>'
                    
                    '\n\n<b>üÜï –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –∑–µ—Ä–∫–∞–ª–æ –±–æ—Ç–∞ –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>'
                    f'\n‚Üí –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–µ—Ä–∫–∞–ª–∞ –ø–µ—Ä–µ—à–µ–¥—à–∏–π –Ω–µ –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º'
                ),
                reply_markup=await ref_menu_kb(user_id=callback.from_user.id)
            )


        elif action == 'EDIT':
            us = await select_user(user_id=callback.from_user.id)
            action = callback_data[3]
            if action == 'E':
                new_part_referral_amount = int(callback_data[4])
                if new_part_referral_amount > us.part_referral_amount_max:
                    await CallbackAnswer(callback, f'‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –≤–∞—à–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ({us.part_referral_amount_max})!', show_alert=True)
                else:
                    await update_user(user_id=callback.from_user.id, data={User.part_referral_amount: new_part_referral_amount})
            us = await select_user(user_id=callback.from_user.id)
            await CallbackEditText(
                callback,
                text=(
                    f'<b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:</b> <code>{us.part_referral_amount}$</code>'
                    f'\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> <code>{us.part_referral_amount_max}$</code>'
                    '\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º:</b>'
                ),
                reply_markup=await ref_choice_kb(current_amount=us.part_referral_amount, max_amount=us.part_referral_amount_max)
            )

        elif action == 'WITHDRAW':
            us = await select_user(user_id=callback.from_user.id)
            action = callback_data[3]
            min_amount_withdraw = 10
            if us.ref_balance >= min_amount_withdraw:
                if action == 'M':
                    await CallbackEditText(
                        callback,
                        text=(
                            f'<b>üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:</b> <code>{famount(us.ref_balance)}$</code>'
                            '\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:</b>'
                        ),
                        reply_markup=await ref_withdraw_kb(ref_balance=us.ref_balance)
                    )
                if action == 'C':
                    amount = float(callback_data[4])
                    if us.ref_balance >= amount:
                        await CallbackEditText(
                            callback,
                            text=(
                                '<b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b>'
                            ),
                            reply_markup=await custom_2_kb(
                                text=f'‚úÖ –í—ã–≤–µ—Å—Ç–∏ {amount}$', callback_data=f'DROP_WORK|REF|WITHDRAW|W|{amount}',
                                text2='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data2=f'DROP_WORK|REF|WITHDRAW|M',
                            )
                        )
                    else:
                        await CallbackAnswer(callback, f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã!', show_alert=True)

                if action == 'W':
                    amount = float(callback_data[4])
                    async with withdraw_locks[callback.from_user.id]:
                        us = await select_user(user_id=callback.from_user.id)
                        if us.ref_balance >= amount:
                            await update_user(user_id=callback.from_user.id, data={User.ref_balance: User.ref_balance - amount})
                            await add_withdraw(
                                user_id=callback.from_user.id,
                                amount=amount
                            )
                            await CallbackEditText(
                                callback,
                                text=(
                                    f'<b>‚úîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <code>{famount(amount)}$</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>'
                                    '\n<i>–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —á–µ–∫ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞.</i>'
                                )
                            )
                        else:
                            await CallbackAnswer(callback, f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã!', show_alert=True)
            else:
                await CallbackAnswer(callback, f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_amount_withdraw}$\n–í–∞—à –±–∞–ª–∞–Ω—Å: {famount(us.ref_balance)}$', show_alert=True)


@router.callback_query(F.data.startswith('BOTS'))
async def main_callback(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    callback_data = callback.data.split('|')
    action = callback_data[1]

    if action == 'RULES':
        await CallbackEditText(
            callback,
            text=(
                '<b>‚ùå –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è:</b>'

                '\n\n<b>1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π, –Ω–∞–∑–≤–∞–Ω–∏–π –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>'
                '\n   ‚Äî üö´ –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.'
                '\n   ‚Äî üö´ –ù–µ—É–º–µ—Å—Ç–Ω—ã–µ, –∞–º–æ—Ä–∞–ª—å–Ω—ã–µ –∏–ª–∏ —à–æ–∫–∏—Ä—É—é—â–∏–µ —Ñ–æ—Ç–æ –∏ –∞–≤–∞—Ç–∞—Ä—ã.'
                '\n   ‚Äî üö´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–µ–≤–µ—Ç—ã, —É–≥—Ä–æ–∑ –∏–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –≤ –ª—é–±–æ–º –≤–∏–¥–µ.'
                '\n   ‚Äî üö´ –õ—é–±—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ –∏ –ø—Ä–æ—á–µ–µ).'

                '\n\n<b>2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:</b>'
                '\n   ‚Äî üî• –†–∞–∑–∂–∏–≥–∞–Ω–∏—è –≤—Ä–∞–∂–¥—ã, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ –ª—é–±—ã—Ö —Ñ–æ—Ä–º –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏.'
                '\n   ‚Äî üì© –°–ø–∞–º–∞, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –æ–±–º–∞–Ω–∞.'

                '\n\n<b>3. –õ—é–±—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–±–æ—Å—Ç–∏, —É–Ω–∏–∂–µ–Ω–∏—è –∏–ª–∏ —É–≥—Ä–æ–∑ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö, –Ω–∞–∑–≤–∞–Ω–∏—è—Ö, –∞–≤–∞—Ç–∞—Ä–∞—Ö:</b>'
                '\n   ‚Äî üò° –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.'
                '\n   ‚Äî üö´ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ—Å—Ç–∏.'

                '\n\n<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>'
                '\n   ‚Äî ‚õîÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–æ—Ç–∞ –∏–ª–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.'
                '\n   ‚Äî üí∞ –í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –Ω–∞—Ä—É—à–∞—é—â–µ–≥–æ –±–æ—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –∏–ª–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã.'
            ),
            reply_markup=await custom_kb(callback_data='BOTS|CREATE')
        )

    if action == 'CREATE':
        await CallbackEditText(
            callback,
            text=(
                '<b>–®–∞–≥ 1: –í–æ–π–¥–∏—Ç–µ –≤ @BotFather</b>'
                '\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞ –≤–≤–µ—Å—Ç–∏ @BotFather. BotFather - —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ Telegram, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ—Ç—ã.'

                '\n\n<b>–®–∞–≥ 2: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å –∏–ª–∏ Start</b>'
                '\n–í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å. –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –Ω–µ–µ BotFather –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'

                '\n\n<b>–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot</b>'
                '\n–í –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ BotFather –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /newbot. –≠—Ç–æ —Å–æ–æ–±—â–∏—Ç BotFather, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞.'

                '\n\n<b>–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞</b>'
                '\nBotFather –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –≤–≤–µ—Å—Ç–∏ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º –±–æ—Ç–æ–º.'

                '\n\n<b>–®–∞–≥ 5: –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞</b>'
                '\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –≤–≤–µ–ª–∏ –∏–º—è, BotFather –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –≤—ã–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ bot. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç, BotFather –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è.'

                '\n\n<b>–®–∞–≥ 6: –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞</b>'
                '\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ BotFather –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞–º –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ –∏ –µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Telegram.'

                '\n\n<b>–®–∞–≥ 7: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞</b>'
            ),
            reply_markup=await create_bot_kb()
        )

    if action == 'MY':
        action = callback_data[2]

        if action == 'M':
            sort_type = int(callback_data[3])
            page = int(callback_data[4])
            await CallbackEditText(
                callback,
                text=(
                    '<b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–∞—à–∏—Ö –∑–µ—Ä–∫–∞–ª</b>'
                    '\n<i>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ</i>'
                ),
                reply_markup=await my_bots_kb(page=page, user_id=callback.from_user.id, current_bot_id=bot.id, sort_type=sort_type)
            )

        elif action == 'V':
            sort_type = int(callback_data[3])
            back_page = int(callback_data[4])
            bot_id = int(callback_data[5])
            action = callback_data[6]

            bot_info = await select_one_record(BotBase, owner_id=callback.from_user.id, bot_id=bot_id)
            if not bot_info:
                return await CallbackAnswer(callback, text='‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', show_alert=True)
            if bot_info.owner_id != callback.from_user.id:
                return await CallbackAnswer(callback, text='‚ùå –î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.', show_alert=True)
            if bot_info.is_deleted:
                return await CallbackAnswer(callback, text='‚ùå –ë–æ—Ç —É–¥–∞–ª—ë–Ω.', show_alert=True)
            if bot_info.is_deleted or bot_info.is_unauthorized:
                return await CallbackAnswer(callback, text='‚ùå –°–ª–µ—Ç–µ–ª —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.', show_alert=True)

            if action == 'M':
                page_action = f'BOTS|MY|V|{sort_type}|{back_page}|{bot_id}'
                await CallbackEditText(
                    callback,
                    text=await user_get_bot_info(bot_info),
                    reply_markup=await view_bot_kb(page_action=page_action, sort_type=sort_type, back_page=back_page)
                )
                    
            elif action == 'DL':
                bot_settings = {"session": bot.session}
                new_bot = Bot(
                    token=bot_info.bot_token,
                    **bot_settings
                )
                try:
                    bot_user = await new_bot.get_me()
                    await new_bot.delete_webhook()
                except TelegramUnauthorizedError:
                    await update_record(
                        BotBase, 
                        bot_token=bot_info.bot_token, 
                        data={
                            BotBase.is_unauthorized: True
                        }
                    )
                except:
                    try:
                        await new_bot.delete_webhook()
                    except:
                        pass
                    traceback.print_exc()
                await update_record(
                    BotBase, 
                    bot_token=bot_info.bot_token, 
                    data={
                        BotBase.is_deleted: True,
                    }
                )
                page_action = f'BOTS|MY|V|{sort_type}|{back_page}|{bot_id}'
                await CallbackEditText(
                    callback,
                    text=f'<b>üö´ –ë–û–¢ –£–î–ê–õ–Å–ù</b>\n\n{await user_get_bot_info(bot_info)}',
                    reply_markup=await view_bot_kb(page_action=page_action, sort_type=sort_type, back_page=back_page)
                )


@router.message(AddPhones.wait_value)
async def state_AddPhones(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    user_info = await select_user(user_id=message.from_user.id)
    limit_wa = (await select_bot_setting()).limit_wa
    bt = await select_bot_setting()
    if bt.added_phones_status == 0:
        return await MessageReply(message, f'<b>‚ö†Ô∏è –ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –ø—Ä–∏—ë–º –Ω–æ–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!</b>')
    if user_info.unban_at and user_info.unban_at > datetime.now():
        return await MessageReply(message, f'<b>‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ! –ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–ª–æ–∂–µ–Ω–∞ –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ {user_info.unban_at.strftime("%d.%m.%Y %H:%M")}</b>')
    else:
        list_phones = [] # —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        not_recognized = 0
        count_writes = 0
        count_added = 0
        already_added = 0
        already_processing = 0
        not_valid_operator = 0
        # already_success = 0
        queue_limit = 0
        try:
            msg_text = message.text.strip().split('\n')
        except:
            msg_text = None
        if not msg_text:
            return
        if not msg_text:
            msg_text = ['123']
        for phone in msg_text:
            count_writes += 1
            phone = phone.replace('+', '').replace('(', '').replace(')', '').replace('-', '').replace(' ', '').replace('/', '').replace('\\', '').replace('‚Äî', '')
            if not phone or not phone.isdigit():
                not_recognized += 1
                continue
            if len(phone) == 11 and phone[0] == '7' and phone[1] == '9':
                list_phones.append(phone[1:])
            elif len(phone) == 11 and phone[0] == '8' and phone[1] == '9':
                list_phones.append(phone[1:])
            elif len(phone) == 10 and phone[0] == '9':
                list_phones.append(phone)
            else:
                not_recognized += 1

        true_phones = list(set(list_phones)) # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
        count_duplicates = len(list_phones) - len(true_phones) # –¥—É–±–ª–∏–∫–∞—Ç—ã
        for number in true_phones:
            add_status = False

            if bt.phone_operator_check_status and not await validate_russian_phone(phone=number):
                not_valid_operator += 1
                continue

            if await select_phone_queue(phone_number=number, statuses=[0, 12]):
                already_added += 1 # —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
            # elif count_added >= limit_wa:
            #     queue_limit += 1 # –ª–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
            elif await select_phone_queue(phone_number=number, statuses=[1, 2, 3]):
                already_processing += 1 # –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            elif len(await select_phone_queues(drop_id=message.from_user.id, statuses=[0, 1, 2, 3, 12])) >= limit_wa:
                queue_limit += 1 # –ª–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
            else:
                count_added += 1 # –¥–æ–±–∞–≤–ª–µ–Ω
                add_status = True
            if add_status:
                await add_phone_queue(drop_id=message.from_user.id, phone_number=number, drop_bot_id=bot.id)
                await update_user(user_id=message.from_user.id, data={User.added_count: User.added_count + 1})
        await MessageAnswer(
            message,
            text=(
                f'<b>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {count_added}/{count_writes}'
                + (f"\n\n<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤:</b>" if count_added != count_writes else "")
                + (f"\n‚Ä¢ <b>–ü–æ–≤—Ç–æ—Ä–æ–≤:</b> {count_duplicates}" if count_duplicates else "")
                + (f"\n‚Ä¢ <b>–£–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {already_added}" if already_added else "")
                + (f"\n‚Ä¢ <b>–£–∂–µ –≤ —Ä–∞–±–æ—Ç–µ:</b> {already_processing}" if already_processing else "")
                + (f"\n‚Ä¢ <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:</b> {not_recognized}" if not_recognized else "")
                + (f"\n‚Ä¢ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä:</b> {not_valid_operator}" if not_valid_operator else "")
                + (f"\n‚Ä¢ <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {queue_limit} ({len(await select_phone_queues(drop_id=message.from_user.id, statuses=[0, 1, 2, 3, 12]))}/{limit_wa})" if queue_limit else "")
                + (f'\n\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>')
                + (f'\n‚Ä¢ <b>–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {len(await select_phone_queues(status=0))}')
                + (f'\n‚Ä¢ <b>–í–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {len(await select_phone_queues(drop_id=message.from_user.id, status=0))}')
                + (f'\n‚Ä¢ <b>–í–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> {len(await select_phone_queues(drop_id=message.from_user.id, statuses=[1, 2, 3]))}')
                + (f'\n\n<b>‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>')
            ),
            reply_markup=await custom_kb()
        )
        await state.set_state(AddPhones.wait_value)


@router.message()
async def message_handler(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    try:
        msg = message.text.strip()
        message_text = msg.replace(' ', '')
    except:
        message_text = None
    if not message_text:
        return
    
    is_token = await is_bot_token(message_text)
    if is_token:
        bot_settings = {"session": bot.session}
        new_bot = Bot(
            token=message_text,
            **bot_settings
        )
        try:
            bot_user = await new_bot.get_me()
        except TelegramUnauthorizedError:
            if await select_one_record(BotBase, bot_token=message_text):
                await update_record(
                    BotBase, 
                    bot_token=message_text, 
                    data={
                        BotBase.owner_id: message.from_user.id,
                        BotBase.is_unauthorized: True
                    }
                )

            return await MessageAnswer(message, text="<b>‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω api-–∫–ª—é—á!</b>\n<i>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.</i>")
        
        if await select_one_record(BotBase, bot_token=message_text):
            # await new_bot.delete_webhook()
            await new_bot.set_webhook(url=OTHER_BOTS_URL.format(bot_token=message_text), allowed_updates=allowed_updates)
            await update_record(
                BotBase, 
                    bot_token=message_text, 
                data={
                    BotBase.owner_id: message.from_user.id,
                    BotBase.bot_name: bot_user.first_name, 
                    BotBase.bot_username: bot_user.username,
                    BotBase.is_deleted: False,
                    BotBase.is_unauthorized: False
                }
            )
            return await MessageAnswer(
                message, 
                text=f"<b>‚ùï –ë–æ—Ç @{bot_user.username} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                reply_markup=await custom_kb(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data=f"BOTS|MY|V|0|1|{bot_user.id}|M")
            )
        else:
            if await select_one_record(BotBase, bot_id=bot_user.id):
                await update_record(
                    BotBase, 
                    bot_id=bot_user.id, 
                    data={
                        BotBase.owner_id: message.from_user.id,
                        BotBase.bot_name: bot_user.first_name, 
                        BotBase.bot_username: bot_user.username,
                        BotBase.bot_token: message_text, 
                        BotBase.is_deleted: False,
                        BotBase.is_unauthorized: False
                    }
                )
            else:
                await add_record(
                    BotBase,
                    owner_id=message.from_user.id, 
                    bot_id=bot_user.id,
                    bot_name=bot_user.first_name,
                    bot_username=bot_user.username,
                    bot_token=message_text,
                    added_at=datetime.now(),
                    updated_at=datetime.now(),
                )
        await new_bot.delete_webhook()
        await new_bot.set_webhook(url=OTHER_BOTS_URL.format(bot_token=message_text), allowed_updates=allowed_updates)
        await MessageAnswer(
            message, 
            text=f"<b>‚úÖ –ë–æ—Ç @{bot_user.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ.</b>",
            reply_markup=await custom_kb(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data=f"BOTS|MY|V|0|1|{bot_user.id}|M")
        )
        await set_default_commands(bot=new_bot)
        try:
            await asyncio.wait_for(upload_profile_photo(bot_token=message_text), timeout=60)
        except asyncio.TimeoutError:
            pass
        except:
            traceback.print_exc()
        return
    else:
        us = await select_user(user_id=message.from_user.id)
        await MessageAnswer(message, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=show_menu_kb)
        await MessageAnswer(message, text=await drop_start_text(us=us), reply_markup=await drop_menu_kb(us=us))